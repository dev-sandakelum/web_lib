import { NextResponse } from "next/server"
import { vectorsPrompt } from "./prompts/vectors-prompt"
import { basePrompt } from "./prompts/base-prompt"
import { trigonometryPrompt } from "./prompts/trigonometry-prompt"
import { complexPrompt } from "./prompts/complex-prompt"
import { logarithmsPrompt } from "./prompts/logarithms-prompt"
import { matricesPrompt } from "./prompts/matrices-prompt"
import { calculusPrompt } from "./prompts/calculus-prompt"
import { algebraPrompt } from "./prompts/algebra-prompt"
import { env } from "process"


export async function POST(req: Request) {
  try {
    const body = await req.json()
    const question: string | undefined = body?.question
    const questionType: string = body?.questionType || "general"

    if (!question || typeof question !== "string" || !question.trim()) {
      return NextResponse.json({ error: "Missing or empty question" }, { status: 400 })
    }

    const GROQ_KEY = process.env.GROQ_API_KEY

    if (!GROQ_KEY) {
      return NextResponse.json(
        { error: "Server missing GROQ_API_KEY. Please set GROQ_API_KEY in environment variables." },
        { status: 500 },
      )
    }

    const getSystemPrompt = (type: string) => {
      const typeSpecificGuidelines: Record<string, string> = {
        vectors: vectorsPrompt,
        trigonometry: trigonometryPrompt,
        complex: complexPrompt,
        logarithms: logarithmsPrompt,
        matrices: matricesPrompt,
        calculus: calculusPrompt,
        algebra: algebraPrompt,
      }

      return basePrompt + "\n\n" + (typeSpecificGuidelines[type] || "")
    }
    // random model selection
    const models = ["llama-3.3-70b-versatile", "moonshotai/kimi-k2-instruct-0905", "openai/gpt-oss-120b" ,"openai/gpt-oss-20b"]
    const randomModel = models[Math.floor(Math.random() * models.length)]
    const groqBody = {
      model: randomModel,
      messages: [
        {
          role: "system",
          content: getSystemPrompt(questionType),
        },
        {
          role: "user",
          content: `Solve this ${questionType} problem step by step. Use clean HTML with proper structure. CRITICAL: Keep everything vertically stacked for mobile - NO horizontal scrolling. Break ALL calculations into SHORT vertical lines with <br>. For matrices, use <span class="ms"></span> for spacing.\n\nProblem: ${question}`,
        },
      ],
      temperature: 0.2,
      max_tokens: 4000,
      top_p: 0.9,
    }

    const res = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${GROQ_KEY}`,
      },
      body: JSON.stringify(groqBody),
    })

    const data = await res.json()

    if (!res.ok) {
      const message = data?.error?.message || data?.message || "Groq API error"
      return NextResponse.json({ error: message }, { status: res.status })
    }

    const result = data.choices?.[0]?.message?.content ?? ""
    const generatedBy = "<br><div class='text-center text-xs text-gray-500 py-2 sm:py-4'>generated by " + randomModel + "</div>"

    return NextResponse.json({ result:  result + generatedBy })
  } catch (err) {
    console.error("Server /api/solve error:", err)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}